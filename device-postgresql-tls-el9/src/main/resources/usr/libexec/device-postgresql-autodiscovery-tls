#!/bin/bash
  
#
# Postgresql Autodiscovery
# ========================
#
# This script autogenerates any required TLS configuration.

set -e

exec 2> >(logger -t ${0})

request="${1}"
instance="${2}"

disable_tls() {

  instance="${1}"

  if test -d "/var/lib/pgsql/data-${instance}"; then

    listen_addresses="rm /files/var/lib/pgsql/data-${instance}/postgresql.conf/listen_addresses"
    ssl="set /files/var/lib/pgsql/data-${instance}/postgresql.conf/ssl off"
    ssl_cert_file="rm /files/var/lib/pgsql/data-${instance}/postgresql.conf/ssl_cert_file"
    ssl_key_file="rm /files/var/lib/pgsql/data-${instance}/postgresql.conf/ssl_key_file"
    ssl_ca_file="rm /files/var/lib/pgsql/data-${instance}/postgresql.conf/ssl_ca_file"

    augtool <<-EOF | /usr/bin/logger -t postgresql-autodiscovery
set /augeas/load/Postgresql/incl[last()+1] "/var/lib/pgsql/data-*/postgresql.conf"
load
${listen_addresses}
${ssl}
${ssl_cert_file}
${ssl_key_file}
${ssl_ca_file}
save
EOF

  fi
}

enable_tls() {

  instance="${1}"
  uuid="${2}"
  line="${3}"

  if test -d "/var/lib/pgsql/data-${instance}"; then

    listen_addresses="rm /files/var/lib/pgsql/data-${instance}/postgresql.conf/listen_addresses"
    if test -f "$line/protocol.txt"; then
      protocol="$(head -n 1 $line/protocol.txt)"
      if test "${protocol}" == "all"; then
        listen_addresses="set /files/var/lib/pgsql/data-${instance}/postgresql.conf/listen_addresses '*'"
      elif test "${protocol}" == "ipv4-only"; then
        listen_addresses="set /files/var/lib/pgsql/data-${instance}/postgresql.conf/listen_addresses '0.0.0.0'"
      elif test "${protocol}" == "ipv6-only"; then
        listen_addresses="set /files/var/lib/pgsql/data-${instance}/postgresql.conf/listen_addresses '::'"
      fi
    fi

    # enabled until further notice
    ssl="set /files/var/lib/pgsql/data-${instance}/postgresql.conf/ssl on"
    ssl_cert_file="set /files/var/lib/pgsql/data-${instance}/postgresql.conf/ssl_cert_file /run/postgresql/server-${uuid}.crt"
    ssl_key_file="set /files/var/lib/pgsql/data-${instance}/postgresql.conf/ssl_key_file /run/postgresql/server-${uuid}.key"

    if test -f /run/postgresql/client-ca.crt; then
      ssl_ca_file="set /files/var/lib/pgsql/data-${instance}/postgresql.conf/ssl_ca_file /run/postgresql/client-ca.crt"
    else
      ssl_ca_file="rm /files/var/lib/pgsql/data-${instance}/postgresql.conf/ssl_ca_file"
    fi

    augtool <<-EOF | /usr/bin/logger -t postgresql-autodiscovery
set /augeas/load/Postgresql/incl[last()+1] "/var/lib/pgsql/data-*/postgresql.conf"
load
${listen_addresses}
${ssl}
${ssl_cert_file}
${ssl_key_file}
${ssl_ca_file}
save
EOF

  fi
}

#
# Add/remove TLS

find /etc/device/services/db/postgresql/tls/ -mindepth 1 -maxdepth 1 -type l | \
while read line; do

  if test ! -f "$line/instance.d/name.txt"; then
    continue;
  elif test "${instance}" != "$(head -n 1 $line/instance.d/name.txt)"; then
    continue;
  fi

  if test ! -L "$line/certificate.d"; then
    uuid=""
  else
    target=$(readlink -f "$line/certificate.d")
    uuid="$(basename $target)"
  fi

  rm -f /run/postgresql/client-ca.crt
  if test -L "$line/ca-certificate.crt"; then

    # write out the ca certificates
    redwax-tool --pem-in="$line/ca-certificate.crt" \
                --group-out=postgres \
                --root-out \
                --pem-out="/run/postgresql/client-ca.crt"

    # update pg_hba.conf
    cat >> "${instance}-hba.conf" <<- EOF
# Added by $0 on `date`
# device services db postgresql tls ca-certificate=*
#
hostssl all     all     all     cert    map=certificate clientname=DN

EOF

  fi

  # remove old certificates
  if test -f "$line/removed"; then

    disable_tls "${instance}"

    systemctl --no-block try-restart "postgresql@${instance}"

    # remove folder
    target=$(readlink -f "$line")
    rm -f "${target}"/*
    rmdir "${target}"
    rm -f "${line}"
  fi

  # add new certificates
  if test -f "$line/added"; then

    if test -f "$line/disabled.bin" -o -z "${uuid}"; then

      disable_tls "${instance}"

    else

      enable_tls "${instance}" "${uuid}" "${line}"

    fi

    systemctl --no-block try-restart "postgresql@${instance}"

    rm -f "$line/added"

  fi

  # update certificates
  if test -f "$line/updated"; then

    if test -f "$line/disabled.bin" -o -z "${uuid}"; then

      disable_tls "${instance}"

    else

      enable_tls "${instance}" "${uuid}" "${line}"

    fi

    systemctl --no-block try-restart "postgresql@${instance}"

    rm -f "$line/updated"

  fi

  exit 0

done

